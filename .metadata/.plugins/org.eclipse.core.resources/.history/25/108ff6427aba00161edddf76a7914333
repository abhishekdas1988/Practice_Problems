import java.util.HashSet;
import java.util.Random;
class Solution {
	int size=0;
	int start_index = 0;
	HashSet<Integer> visited = new HashSet<Integer>();
    public int solution(int[] A) {
    	
    	// Starting with mid element
    	// Assume that Size of the array as the start point
    	this.size=A.length;
    	while (true){
    		int prev = 0;
        	int next =0;
    		int current = this.rand();
    		if(!this.visited.contains(current)){
    			this.visited.add(current);
    			if(current!=this.start_index || current!=this.size-1){
    				int i = current-1;
    				int j = current+1;
    				while(i<=0){
    					prev = prev +A[i];
    					i--;
    				}
    				while(j<=this.size-1){
    					next= next+A[j];
    					j++;
    				}
    				if(prev == next){
    					return current;
    				}
    			}
    			else{
    				return current;
    			}
    			if (this.visited.size()==this.size)
    				return -1;
    		}
    	}
    }
    public int rand(){
    	Random rand = new Random();
    	return (rand.nextInt(this.size - start_index)+start_index);   	
    }
    public static void main(){
    	
    	int A[]={-1,3,-4,5,1,-6,2,1};
    	Solution s =new Solution();
    	s.solution(A);
    	
    }
}