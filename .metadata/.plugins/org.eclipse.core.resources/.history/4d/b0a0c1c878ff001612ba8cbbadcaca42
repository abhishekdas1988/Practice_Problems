import java.util.*;

// Tom starts at 0,0 in the maze, has to go to a location (x,y) to meet jery, valid 
// moves are -> , <-,^ or v on block at a time, he can move through 0, 1 means block
// 2 means cheese.
// Min path required for tom to meet Jery with max cheese.
public class TomAndJeryMinPath {
	static Map<String, Map<Moves, Integer>> pos_moves = new HashMap<String, Map<Moves, Integer>>();
	static int[][] arr;
	static int[][] cheese;

	public void calculatePath(int[][] arr, int row, int col) {

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				String key = Integer.toString(i).concat(Integer.toString(j));
				Map<Moves, Integer> val = this.getMoves(i, j, arr.length, arr[i].length);
				pos_moves.put(key, val);
				this.OptimumMoves();
			}
		}

	}

	public int OptimumMoves() {
		// fill cheese

		for (int i = 0; i < arr[0].length; i++) {
			if (arr[0][i] == 1) {
				arr[0][i] = -1;
			} else {
				if (i == 0 && arr[0][i] == 2) {
					cheese[0][0] = 1;
				} else {
					if (arr[0][i] == 1) {
						cheese[0][i] = cheese[0][i - 1] + 1;
					} else {
						cheese[0][i] = cheese[0][i - 1];
					}
				}
			}
		}
		for (int i = 1; i < arr[0].length; i++) {
			if (arr[i][0] == 1) {
				arr[i][0] = -1;
			} else {
				if(cheese[i-1][0]==-1){
					if(arr[i][0]== 2){
						cheese[i][0]=1;
					}
					else{
						cheese[i][0]=0;
					}
				}
				else{
					if(arr[i][0]== 2){
						cheese[i][0]=1+cheese[i-1][0];
					}
					else{
						cheese[i][0]=cheese[i-1][0];
					}
					
				}
				
			}
		}
		for(int i = 0;i< cheese.length;i++){
			for(int j = 0;j< cheese[i].length;j++){
				System.out.print(cheese[i][j]+" ");
			}
			System.out.println();
		}

		//
		return 0;
	}

	public Map<Moves, Integer> getMoves(int x, int y, int max_x, int max_y) {
		Map<Moves, Integer> poss_moves = new HashMap<Moves, Integer>();

		if (x + 1 <= max_x && arr[x + 1][y] != 1) {
			poss_moves.put(Moves.R, 1);
		}
		if (x - 1 >= 0 && arr[x - 1][y] != 1) {
			poss_moves.put(Moves.L, 1);
		}
		if (y - 1 >= 0 && arr[x][y - 1] != 1) {
			poss_moves.put(Moves.U, 1);
		}
		if (y + 1 <= max_y && arr[x][y + 1] != 1) {
			poss_moves.put(Moves.D, 1);
		}
		return poss_moves;
	}
	public static void main(String[] args){
		TomAndJeryMinPath o = new TomAndJeryMinPath();
		int[][] a = {{0,2,0},{0,0,1},{1,0,0}};
		o.calculatePath(a, 3, 3);
		
	}

}
