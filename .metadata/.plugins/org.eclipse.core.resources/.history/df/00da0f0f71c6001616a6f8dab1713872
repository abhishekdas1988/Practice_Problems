import java.util.ArrayList;
import java.util.Scanner;

/*
 * https://www.hackerrank.com/challenges/balanced-forest
 * Greg received an -node tree as a graduation gift, where each node  contains  coins. He wants to insert exactly one new node, , into the tree using the following process:

Select a node, , where .
Create a new edge connecting node  to a new node, .
Add  coins to node  (this can be any non-negative integer).
Now that Greg's tree has  nodes, he wants to cut two of its edges to create a forest of  trees where each tree contains an equal number of coins. If such a configuration is possible, he calls it a balanced forest.

For each tree Greg receives as a gift, determine the minimum value of  such that the tree can be split into a balanced forest (meaning that each of the forest's three trees have the same number of coins); if no  exists that enables Greg to create a balanced forest, print  instead.

Input Format

The first line contains a single integer, , denoting the number of trees gifted to Greg. The subsequent lines describe each query in the following format:

The first line contains an integer, , denoting the number of nodes in the tree.
The second line contains  space-separated integers describing the respective values of , where each  denotes the number of coins at node .
Each line  of the  subsequent lines contains two space-separated integers,  and  (where ), describing edge  connecting nodes  and .
Note: It is guaranteed that each query forms a valid undirected tree.

Constraints

Subtasks

For  of the maximum score:

For  of the maximum score:

Output Format

For each query, print the minimum value of  on a new line; if no such value exists, print  instead.

Sample Input

2
5
1 2 2 1 1
1 2
1 3
3 5
1 4
3
1 3 5
1 3
1 2
Sample Output

2
-1
Explanation

We perform the following two queries:

The tree initially looks like this: 
q1 initial tree
Greg can add a new node  with  coins and create a new edge connecting nodes  and . Then he cuts the edge connecting nodes  and  and the edge connecting nodes  and . We now have a three-tree forest, where each tree has  coins. 
q1 cut tree
In the second query, it's impossible to add a node in such a way that we can split the tree into a three-tree forest where each tree has an equal number of coins, so we print .*/

public class NTree {
	ArrayList<String> input = new ArrayList<String>();
	public void inputReader(){
		Scanner s  = new Scanner(System.in);
		Integer numTrees = Integer.parseInt(s.nextLine());
		input.add(numTrees.toString());
		for (int i = 0;i< numTrees;i++){
			Integer nodes = Integer.parseInt(s.nextLine());
			input.add(nodes.toString());
			for(int j = 0;j<nodes;j++){
				input.add(s.nextLine());
			}
		}
		System.out.println("End");
		
	}
	public void createTree(){
		int j = 1;
		for(int i = 0;i<Integer.parseInt(input.get(0));i++){
			int nodes = Integer.parseInt(input.get(j));
			System.out.println(" For - "+ j);
			j++;
			ArrayList<String> in = new ArrayList<String>();
			while(input.get(j).contains(" ")){
				in.add(input.get(j));
				System.out.println(" While - "+ j);
				j++;
			}
			this.Solution(nodes, in);
		}
			
	}
	public void Solution(int nodes, ArrayList<String> edges){
		System.out.println(nodes + edges.size());
	}
	
	public static void main(String[] args){
		NTree obj = new NTree();
		obj.inputReader();
		obj.createTree();
	}

}
