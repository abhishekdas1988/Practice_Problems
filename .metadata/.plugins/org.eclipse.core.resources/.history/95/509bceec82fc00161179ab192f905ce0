import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

/* The assumptions for this class are similar to that of the previous class AnagramsClassic
 * 
 * The only difference - Generally anagrams in real life usage would be to find the 
 * next possible path from the given input,eg - search
 * When you type "Kur" in youtube search , it shows a possible list of all the valid 
 * searches or recommendations like "Kurt Kobain", "kuro(famous streamer)", etc
 * 
 * Although the previous class did have its strengths, it also possesses caveats.
 * For the above usage as mentioned, for every character typed, you would have to take a 
 * look into the hashmap. 
 * eg - you type "a" - Since the dictionary is most probable to have nothing matching to a, the possible
 * anagram it would return is itself, "a". but "a" could have so many words starting with it which are 
 * possible anagrams to the further characters you may type
 * Eg - you have to type "bat" and you started with "b" - No anagrams
 * 	  - Then you type "a", the search string becomes - "ba" - The anagrams could be anything that starts with "a" and "b"
 *    - Then you went ahead and typed "t" the string becomes - "bat" - the anagrams could be anthing that is from "bat", "tab",etc that
 *      exists in the dictionary.
 *      
 *      I will implement that here. Will make it interactive so that its fun to play with.
 */
public class AnagramsDynamic implements Comparator<String> {
	private static String FILE_PATH;
	private Map<String, Set<String>> bank;
	private List<String> keyset;
	private static final int SIZE = 3;

	public AnagramsDynamic(String file) {
		AnagramsDynamic.FILE_PATH = file;
		this.bank = new HashMap<String, Set<String>>();
	}

	public void textRead() {
		try {
			File f = new File(AnagramsDynamic.FILE_PATH);
			BufferedReader br;
			if (AnagramsDynamic.FILE_PATH.compareTo("") == 0 || AnagramsDynamic.FILE_PATH == null) {
				throw new IllegalArgumentException("File Path cant be null or empty");
			} else if (!f.exists()) {
				throw new FileNotFoundException("File not found at " + AnagramsDynamic.FILE_PATH);
			}
			br = new BufferedReader(new FileReader(AnagramsDynamic.FILE_PATH));
			String currWord;
			while ((currWord = br.readLine()) != null) {
				this.fillDict(currWord);
			}
			br.close();
			this.keyset = new LinkedList<String>(this.bank.keySet());
			Collections.sort(this.keyset);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	private void fillDict(String word) {
		// Empty strings could be anagram of themselves
		String key = new String();
		if (word.length() == 0 || word == null) {
			if (this.bank.containsKey("")) {
				Set<String> curr = this.bank.get("");
				curr.add("");
				this.bank.put("", curr);
			} else {
				this.bank.put("", new TreeSet<String>());
			}
		} else {
			for (int i = 0; i < word.length(); i++) {
				String s = word.substring(0, i + 1);
				char[] s_arr = s.toCharArray();
				Arrays.sort(s_arr);
				key = Arrays.toString(s_arr);
				if (!this.bank.containsKey(key)) {
					this.bank.put(key, new TreeSet<String>());
				}
			}
			if (this.bank.containsKey(key)) {
				Set<String> curr = this.bank.get(key);
				curr.add(word);
				this.bank.put(key, curr);
			}
		}
	}

	private String removeCharacters(String key) {
		StringBuilder s = new StringBuilder("");
		for (int i = 0; i < key.length(); i++) {
			if (key.charAt(i) != ',' && key.charAt(i) != ']' && key.charAt(i) != '[') {
				s.append(Character.toString(key.charAt(i)));
			}
		}
		return s.toString();
	}

	private void createDynamicAnagramSuggestions(String word) {
		// Setting a limit of suggestion query to current word.length() +1, to
		// limit the number of suggestions
		char[] word_arr = word.toCharArray();
		Arrays.sort(word_arr);
		String key = Arrays.toString(word_arr);
		List<String> recommendationList = this.recommendation((key));
		if (!this.bank.containsKey((key))) {
			System.out.println("Given Word = "+word + " - [null]");
			System.out.println("Here are some recommendations...");
			for (String s : recommendationList) {
				System.out.print(s + " = [ ");
				for (String val : this.bank.get(s)) {
					System.out.print(val + " ");
				}
				System.out.print("]");
				System.out.println();
			}
			System.out.println();
		} else {
			System.out.print("Given Word "+word + " - [");
			for (String s : this.bank.get((key))) {
				System.out.print(s + " ");
			}
			System.out.print("]");
			System.out.println();
			System.out.println("Here are some recommendations... ");
			for (String s : recommendationList) {
				System.out.print(s + " = [");
				for (String val : this.bank.get(s)) {
					System.out.print(val + " ");
				}
				System.out.print("]");
				System.out.println();
			}
			System.out.println();
		}
	}

	public List<String> recommendation(String word) {
		int desiredLength = word.length() + SIZE;
		List<String> recommendationList = new LinkedList<String>();
		for (String s : this.keyset) {
			if (s.length() <= desiredLength && s.contains(word.substring(1, word.length() - 1))) {
				recommendationList.add(s);
			}
		}
		return recommendationList;
	}

	@Override
	public int compare(String a, String b) {
		return (a.length() > b.length() ? -1 : (a.length() == b.length() ? 0 : 1));
	}

	public static void main(String[] args) {
		AnagramsDynamic o = new AnagramsDynamic("D:\\Eclipse\\EverWise\\src\\dictionary");
		o.textRead();
		Scanner s = new Scanner(System.in);
		String curr ="";
		while((curr =s.nextLine())!="-1"){
			
			o.createDynamicAnagramSuggestions("alter");
		}

	}

}
